generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  analyses       Analysis[]
  backgroundJobs BackgroundJob[]
  platformErrors PlatformError[]
  sessions       Session[]
  activities     UserActivity[]
  templates      UserTemplate[]
  welcome        UserWelcome?
  notifications  Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Analysis {
  id             String   @id @default(uuid())
  userId         String
  templateId     String
  modelId        String
  provider       String
  fileName       String
  analysisDate   DateTime @default(now())
  durationMs     Int?
  analysisResult Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateId])
  @@index([analysisDate])
}

model UserTemplate {
  id             String   @id @default(uuid())
  userId         String
  name           String
  description    String?
  category       String   @default("custom")
  icon           String   @default("✨")
  systemPrompt   String
  analysisPrompt String
  isBuiltIn      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@index([category])
}

model AnalysisModule {
  id                String   @id @default(uuid())
  name              String   @unique(map: "module_unique_name")
  description       String?
  instructionPrompt String
  expectedJsonHint  String
  category          String   @default("general")
  icon              String   @default("✨")
  isActive          Boolean  @default(true)
  isBuiltIn         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

model BackgroundJob {
  id          String    @id @default(uuid())
  userId      String
  type        String    @default("ANALYSIS")
  status      JobStatus @default(PENDING)
  templateId  String?
  modelId     String?
  provider    String?
  fileName    String?
  fileContent String?
  progress    Int       @default(0)
  currentStep String?
  totalSteps  Int       @default(1)
  result      Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  retryCount  Int       @default(0)
  apiKey      String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

model PlatformError {
  id              String        @id @default(uuid())
  category        ErrorCategory
  severity        ErrorSeverity @default(MEDIUM)
  code            String?
  message         String
  userId          String?
  endpoint        String?
  userAgent       String?
  sessionId       String?
  stackTrace      String?
  requestData     Json?
  responseData    Json?
  aiProvider      String?
  modelId         String?
  isResolved      Boolean       @default(false)
  resolvedAt      DateTime?
  resolvedBy      String?
  resolution      String?
  occurrenceCount Int           @default(1)
  firstOccurred   DateTime      @default(now())
  lastOccurred    DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User?         @relation(fields: [userId], references: [id])

  @@index([category])
  @@index([severity])
  @@index([userId])
  @@index([aiProvider])
  @@index([isResolved])
  @@index([createdAt])
  @@index([lastOccurred])
}

model PlatformMetric {
  id          String   @id @default(uuid())
  name        String
  category    String
  value       Float
  unit        String?
  period      String
  periodStart DateTime
  periodEnd   DateTime
  metadata    Json?
  createdAt   DateTime @default(now())

  @@unique([name, period, periodStart])
  @@index([name])
  @@index([category])
  @@index([period])
  @@index([periodStart])
}

model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  action    String
  category  String
  page      String?
  metadata  Json?
  sessionId String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([category])
  @@index([timestamp])
}

enum Role {
  USER
  ADMIN
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ErrorSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ErrorCategory {
  AI_PROVIDER
  DATABASE
  AUTHENTICATION
  FILE_PROCESSING
  JSON_PARSING
  VALIDATION
  NETWORK
  SYSTEM
  USER_INPUT
}

model WaitingList {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String?
  company    String?
  useCase    String?
  source     String?
  isNotified Boolean   @default(false)
  position   Int?
  inviteCode String?   @unique
  invitedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([email])
  @@index([position])
  @@index([createdAt])
}

model LaunchCountdown {
  id               String   @id @default(uuid())
  targetDate       DateTime
  title            String   @default("CharismaAI is Coming Soon")
  subtitle         String?  @default("Get ready for AI-powered communication insights")
  isActive         Boolean  @default(true)
  showDays         Boolean  @default(true)
  showHours        Boolean  @default(true)
  showMinutes      Boolean  @default(true)
  showSeconds      Boolean  @default(true)
  completedTitle   String?  @default("CharismaAI is Now Live!")
  completedSubtitle String? @default("Start analyzing your conversations today")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([isActive])
  @@index([targetDate])
}

model UserWelcome {
  id              String    @id @default(uuid())
  userId          String    @unique
  hasSeenWelcome  Boolean   @default(false)
  welcomeShownAt  DateTime?
  onboardingStep  Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       String
  title      String
  message    String
  metadata   Json?
  read       Boolean  @default(false)
  readAt     DateTime?
  persistent Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([type])
  @@index([createdAt])
}
