// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Role enum first
enum Role {
  USER
  ADMIN
}

// Our User model, updated to include 'role' and link to NextAuth's 'Account'
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique // Make email optional for some providers, but required for Credentials
  emailVerified DateTime?
  image         String?
  password      String?   // Make password optional for non-credentials providers
  role          Role      @default(USER) // NEW: Role field

  accounts      Account[]
  sessions      Session[]
  analyses      Analysis[]     // User's analysis history
  templates     UserTemplate[] // User's custom templates
  backgroundJobs BackgroundJob[] // User's background processing jobs
  platformErrors PlatformError[] // Errors associated with this user
  activities    UserActivity[]  // User activity tracking

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// NextAuth.js Models (do not modify these fields unless you know what you are doing)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Analysis history model for storing user analysis results
model Analysis {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId    String
  modelId       String
  provider      String
  fileName      String
  analysisDate  DateTime     @default(now())
  durationMs    Int? // Duration of AI analysis in milliseconds
  analysisResult Json         // Stores the full AnalysisResult object as JSON
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
  @@index([templateId])
  @@index([analysisDate])
}

// User-specific custom templates model
model UserTemplate {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  category      String       @default("custom") // Matches AnalysisTemplate['category'] but as string
  icon          String       @default("✨")
  systemPrompt  String
  analysisPrompt String // Store the string representation of the prompt function
  isBuiltIn     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([userId, name]) // Ensure a user can't have two templates with the same name
  @@index([userId])
  @@index([category])
}

// Represents a reusable, granular analysis component
model AnalysisModule {
  id                  String   @id @default(uuid())
  name                String   @unique(map: "module_unique_name") // e.g., "Emotional Arc Tracking"
  description         String?  @db.Text // What this module analyzes
  instructionPrompt   String   @db.Text // The specific AI instruction text for this module
  expectedJsonHint    String   @db.Text // JSON string example for expected Insight structure from AI
  category            String   @default("general") // e.g., "Emotional", "Pattern", "Personality", "Overall"
  icon                String   @default("✨") // For UI display
  isActive            Boolean  @default(true) // Admin can disable a module
  isBuiltIn           Boolean  @default(false) // System-defined modules cannot be deleted by admin
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

// Background job processing status
enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Background analysis jobs
model BackgroundJob {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String    @default("ANALYSIS") // Job type: ANALYSIS, BULK_ANALYSIS, etc.
  status        JobStatus @default(PENDING)

  // Input data
  templateId    String?
  modelId       String?
  provider      String?
  fileName      String?
  fileContent   String?   @db.Text
  apiKey        String?   @db.Text  // Store API key for server-side access

  // Progress tracking
  progress      Int       @default(0) // 0-100 percentage
  currentStep   String?   // Current processing step
  totalSteps    Int       @default(1)
  retryCount    Int       @default(0) // Number of retry attempts

  // Results
  result        Json?     // Final analysis result
  error         String?   @db.Text // Error message if failed

  // Timing
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

// Platform error tracking and logging
enum ErrorSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ErrorCategory {
  AI_PROVIDER
  DATABASE
  AUTHENTICATION
  FILE_PROCESSING
  JSON_PARSING
  VALIDATION
  NETWORK
  SYSTEM
  USER_INPUT
}

model PlatformError {
  id            String        @id @default(uuid())

  // Error classification
  category      ErrorCategory
  severity      ErrorSeverity @default(MEDIUM)
  code          String?       // Error code (e.g., "JSON_PARSE_FAILED")
  message       String        @db.Text

  // Context information
  userId        String?
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  endpoint      String?       // API endpoint or page where error occurred
  userAgent     String?       // Browser/client information
  sessionId     String?       // Session identifier

  // Technical details
  stackTrace    String?       @db.Text
  requestData   Json?         // Request payload (sanitized)
  responseData  Json?         // Response data (sanitized)

  // Provider-specific data
  aiProvider    String?       // Which AI provider caused the error
  modelId       String?       // Which model was being used

  // Resolution tracking
  isResolved    Boolean       @default(false)
  resolvedAt    DateTime?
  resolvedBy    String?       // Admin who resolved it
  resolution    String?       @db.Text // How it was resolved

  // Occurrence tracking
  occurrenceCount Int         @default(1)
  firstOccurred DateTime      @default(now())
  lastOccurred  DateTime      @default(now())

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([category])
  @@index([severity])
  @@index([userId])
  @@index([aiProvider])
  @@index([isResolved])
  @@index([createdAt])
  @@index([lastOccurred])
}

// Platform analytics and metrics
model PlatformMetric {
  id            String   @id @default(uuid())

  // Metric identification
  name          String   // e.g., "daily_analyses", "error_rate", "user_registrations"
  category      String   // e.g., "usage", "performance", "errors", "users"

  // Metric value
  value         Float
  unit          String?  // e.g., "count", "percentage", "ms", "mb"

  // Time period
  period        String   // e.g., "hourly", "daily", "weekly", "monthly"
  periodStart   DateTime
  periodEnd     DateTime

  // Additional metadata
  metadata      Json?    // Additional context data

  createdAt     DateTime @default(now())

  @@index([name])
  @@index([category])
  @@index([period])
  @@index([periodStart])
  @@unique([name, period, periodStart])
}

// User activity tracking for analytics
model UserActivity {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Activity details
  action        String   // e.g., "analysis_started", "file_uploaded", "settings_changed"
  category      String   // e.g., "analysis", "navigation", "settings"

  // Context
  page          String?  // Which page/component
  metadata      Json?    // Additional activity data

  // Session tracking
  sessionId     String?
  ipAddress     String?
  userAgent     String?

  timestamp     DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([category])
  @@index([timestamp])
}
